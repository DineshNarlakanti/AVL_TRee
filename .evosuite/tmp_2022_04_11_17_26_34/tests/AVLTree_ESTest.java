/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 11 22:28:18 GMT 2022
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AVLTree_ESTest extends AVLTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.delete(1213);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete((-1));
      assertEquals((-1), aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals((-1), aVLTree0.height());
      assertEquals((-1), int0);
      
      aVLTree0.insert((-1));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(121);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(1856);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      int int0 = 1;
      aVLTree0.delete(1);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(1);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(1);
      assertEquals(0, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      aVLTree_Node0.height = 1;
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node0.height = (-668);
      assertEquals((-668), aVLTree0.height());
      
      aVLTree0.delete(111);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete((-668));
      assertEquals(0, aVLTree0.height());
      
      aVLTree_Node0.height = 1;
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(1487);
      assertEquals(0, aVLTree0.height());
      
      int int1 = aVLTree0.height();
      assertFalse(int1 == int0);
      assertEquals(0, aVLTree0.height());
      assertEquals(0, int1);
      
      int int2 = aVLTree0.getBalance(aVLTree_Node0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, aVLTree0.height());
      assertEquals(0, int2);
      
      aVLTree_Node0.key = 1065;
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertSame(aVLTree_Node1, aVLTree_Node0);
      assertEquals(0, aVLTree0.height());
      assertNotNull(aVLTree_Node1);
      
      aVLTree_Node0.right = aVLTree_Node1;
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(3, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.insert(int0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert((-1102));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(107);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(1, aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals(1, aVLTree0.height());
      assertEquals(1, int0);
      
      aVLTree0.insert(1);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(1);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-4805));
      assertEquals(1, aVLTree0.height());
      assertNull(aVLTree_Node0);
      
      aVLTree0.insert((-4805));
      assertEquals(1, aVLTree0.height());
      
      int int1 = aVLTree0.height();
      assertTrue(int1 == int0);
      assertEquals(1, aVLTree0.height());
      assertEquals(1, int1);
      
      int int2 = aVLTree0.getBalance((AVLTree.Node) null);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, aVLTree0.height());
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertEquals((-1), aVLTree0.height());
      assertNull(aVLTree_Node0);
      
      int int0 = aVLTree0.getBalance((AVLTree.Node) null);
      assertEquals((-1), aVLTree0.height());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert((-84));
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertEquals(0, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      int int0 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals(0, aVLTree0.height());
      assertEquals(0, int0);
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertSame(aVLTree_Node1, aVLTree_Node0);
      assertEquals(0, aVLTree0.height());
      assertNotNull(aVLTree_Node1);
      
      aVLTree_Node0.left = aVLTree_Node1;
      assertEquals(0, aVLTree0.height());
      
      aVLTree_Node1.left = aVLTree_Node0;
      assertEquals(0, aVLTree0.height());
      
      aVLTree_Node1.key = (-1708);
      assertEquals(0, aVLTree0.height());
      
      int int1 = aVLTree0.getBalance(aVLTree_Node1);
      assertFalse(int1 == int0);
      assertSame(aVLTree_Node1, aVLTree_Node0);
      assertEquals(0, aVLTree0.height());
      assertEquals((-1), int1);
      
      int int2 = aVLTree0.height();
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, aVLTree0.height());
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert(1364);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals(1, aVLTree0.height());
      assertEquals(1, int0);
      
      aVLTree0.insert(1);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(1);
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertSame(aVLTree_Node1, aVLTree_Node0);
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node1);
      
      aVLTree_Node0.right = aVLTree_Node1;
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node0.key = 1503;
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node0.height = 1;
      assertEquals(1, aVLTree0.height());
      
      int int1 = aVLTree0.getBalance(aVLTree_Node0);
      assertTrue(int1 == int0);
      assertSame(aVLTree_Node0, aVLTree_Node1);
      assertEquals(1, aVLTree0.height());
      assertEquals(1, int1);
      
      int int2 = 0;
      aVLTree0.delete(0);
      assertEquals(4, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.delete(int2);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      int int0 = 834;
      aVLTree0.insert(834);
      assertEquals(0, aVLTree0.height());
      
      int int1 = (-766);
      aVLTree0.insert((-766));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert((-1394));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert((-662));
      assertEquals(2, aVLTree0.height());
      
      aVLTree0.delete((-766));
      assertEquals(1, aVLTree0.height());
      
      int int2 = aVLTree0.height();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, aVLTree0.height());
      assertEquals(1, int2);
      
      int int3 = aVLTree0.height();
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(1, aVLTree0.height());
      assertEquals(1, int3);
      
      int int4 = 0;
      aVLTree0.insert(0);
      assertEquals(2, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertEquals(2, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertSame(aVLTree_Node1, aVLTree_Node0);
      assertEquals(2, aVLTree0.height());
      assertNotNull(aVLTree_Node1);
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.find(1);
      assertEquals(2, aVLTree0.height());
      assertNull(aVLTree_Node2);
      
      AVLTree.Node aVLTree_Node3 = aVLTree0.find(1);
      assertEquals(2, aVLTree0.height());
      assertNull(aVLTree_Node3);
      
      aVLTree0.insert(1);
      assertEquals(2, aVLTree0.height());
      
      int int5 = 2177;
      // Undeclared exception!
      try { 
        aVLTree0.insert(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      int int0 = 1;
      aVLTree0.delete(1);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(1);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(0);
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      aVLTree_Node0.height = 1;
      assertEquals(1, aVLTree0.height());
      
      int int1 = 315;
      aVLTree_Node0.height = 315;
      assertEquals(1, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.delete(111);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.delete(1);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete(1);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(6621);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(0);
      assertEquals(0, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.find((-4195));
      assertEquals(0, aVLTree0.height());
      assertNull(aVLTree_Node1);
      
      aVLTree_Node0.left = null;
      assertEquals(0, aVLTree0.height());
      
      aVLTree_Node0.right = null;
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.getRoot();
      assertFalse(aVLTree_Node2.equals((Object)aVLTree_Node0));
      assertNotSame(aVLTree_Node2, aVLTree_Node0);
      assertEquals(0, aVLTree0.height());
      assertNotNull(aVLTree_Node2);
      
      aVLTree_Node0.right = aVLTree_Node2;
      assertEquals(0, aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals(0, aVLTree0.height());
      assertEquals(0, int0);
      
      aVLTree_Node2.left = aVLTree_Node0.right;
      assertEquals(0, aVLTree0.height());
      
      int int1 = aVLTree0.getBalance(aVLTree_Node0);
      assertFalse(aVLTree_Node0.equals((Object)aVLTree_Node2));
      assertFalse(int1 == int0);
      assertNotSame(aVLTree_Node0, aVLTree_Node2);
      assertEquals(0, aVLTree0.height());
      assertEquals(1, int1);
      
      int int2 = aVLTree0.getBalance(aVLTree_Node0);
      assertFalse(aVLTree_Node0.equals((Object)aVLTree_Node2));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertNotSame(aVLTree_Node0, aVLTree_Node2);
      assertEquals(0, aVLTree0.height());
      assertEquals(1, int2);
      
      // Undeclared exception!
      aVLTree0.find(0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.delete((-354));
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(1852);
      assertEquals(0, aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals(0, aVLTree0.height());
      assertEquals(0, int0);
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(1852);
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      aVLTree0.insert((-537));
      assertEquals(1, aVLTree0.height());
      
      int int1 = aVLTree0.height();
      assertFalse(int1 == int0);
      assertEquals(1, aVLTree0.height());
      assertEquals(1, int1);
      
      int int2 = aVLTree0.getBalance(aVLTree_Node0);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, aVLTree0.height());
      assertEquals(0, int2);
      
      aVLTree0.insert(1);
      assertEquals(2, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      assertNotSame(aVLTree_Node1, aVLTree_Node0);
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node1);
      
      aVLTree0.insert(0);
      assertEquals(2, aVLTree0.height());
      
      int int3 = aVLTree0.getBalance((AVLTree.Node) null);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(2, aVLTree0.height());
      assertEquals(0, int3);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert((-770));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(2814);
      assertEquals(1, aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals(1, aVLTree0.height());
      assertEquals(1, int0);
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertSame(aVLTree_Node1, aVLTree_Node0);
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node1);
      
      aVLTree_Node0.left = aVLTree_Node1;
      assertEquals(1, aVLTree0.height());
      
      int int1 = aVLTree0.getBalance(aVLTree_Node0);
      assertFalse(int1 == int0);
      assertSame(aVLTree_Node0, aVLTree_Node1);
      assertEquals(1, aVLTree0.height());
      assertEquals((-1), int1);
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.getRoot();
      assertSame(aVLTree_Node2, aVLTree_Node0);
      assertSame(aVLTree_Node2, aVLTree_Node1);
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node2);
      
      aVLTree0.delete((-770));
      assertEquals(4, aVLTree0.height());
      
      aVLTree0.delete(2814);
      assertEquals(7, aVLTree0.height());
      
      // Undeclared exception!
      aVLTree0.find(0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.delete(426);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(426);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-2420));
      assertEquals(1, aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals(1, aVLTree0.height());
      assertEquals(1, int0);
      
      int int1 = (-3650);
      int int2 = aVLTree0.height();
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, aVLTree0.height());
      assertEquals(1, int2);
      
      // Undeclared exception!
      try { 
        aVLTree0.delete(426);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertEquals((-1), aVLTree0.height());
      assertNull(aVLTree_Node0);
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals(0, aVLTree0.height());
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        aVLTree0.insert(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert(740);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-2021));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert((-19));
      assertEquals(1, aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals(1, aVLTree0.height());
      assertEquals(1, int0);
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(1117);
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert(1006);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert((-2233));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-1));
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.delete(1);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(1);
      assertEquals(0, aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals(0, aVLTree0.height());
      assertEquals(0, int0);
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(1);
      assertEquals(0, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      int int1 = aVLTree0.getBalance(aVLTree_Node0);
      assertTrue(int1 == int0);
      assertEquals(0, aVLTree0.height());
      assertEquals(0, int1);
      
      aVLTree0.delete(1);
      assertEquals((-1), aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert(1272);
      assertEquals(0, aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals(0, aVLTree0.height());
      assertEquals(0, int0);
      
      aVLTree0.delete(0);
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      int int0 = aVLTree0.height();
      assertEquals((-1), aVLTree0.height());
      assertEquals((-1), int0);
      
      aVLTree0.delete((-1));
      assertEquals((-1), aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.delete((-1));
      assertEquals((-1), aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-1441));
      assertEquals(0, aVLTree0.height());
      assertNull(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(1303);
      assertEquals((-1), aVLTree0.height());
      assertNull(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(1);
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert((-599));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(3137);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert((-3376));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(2522);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-1));
      assertEquals(1, aVLTree0.height());
      assertNull(aVLTree_Node0);
      
      aVLTree0.delete(3137);
      assertEquals(1, aVLTree0.height());
      
      int int0 = aVLTree0.getBalance((AVLTree.Node) null);
      assertEquals(1, aVLTree0.height());
      assertEquals(0, int0);
      
      aVLTree0.insert(521);
      assertEquals(1, aVLTree0.height());
      
      int int1 = aVLTree0.getBalance((AVLTree.Node) null);
      assertTrue(int1 == int0);
      assertEquals(1, aVLTree0.height());
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = 834;
      aVLTree0.insert(834);
      int int1 = (-766);
      aVLTree0.insert((-766));
      aVLTree0.insert((-1394));
      aVLTree0.insert((-662));
      aVLTree0.delete((-766));
      aVLTree0.height();
      aVLTree0.height();
      int int2 = 0;
      aVLTree0.insert(0);
      aVLTree0.getRoot();
      aVLTree0.getRoot();
      aVLTree0.find(1);
      aVLTree0.find(1);
      aVLTree0.insert(1);
      // Undeclared exception!
      try { 
        aVLTree0.insert(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(1065);
      aVLTree0.delete((-3120));
      aVLTree0.insert((-3120));
      aVLTree0.delete(1516);
      aVLTree0.getRoot();
      aVLTree0.insert(4049);
      aVLTree0.insert(3517);
      aVLTree0.insert(0);
      aVLTree0.insert(815);
      aVLTree0.find(0);
      int int0 = aVLTree0.height();
      assertEquals(2, int0);
  }
}
