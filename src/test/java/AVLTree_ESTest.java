/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 12 18:09:06 GMT 2022
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AVLTree_ESTest extends AVLTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-3112));
      aVLTree0.delete(1065);
      aVLTree0.insert(4049);
      aVLTree0.insert(3517);
      aVLTree0.insert((-17));
      aVLTree0.insert(1065);
      aVLTree0.find((-17));
      assertEquals(2, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.getRoot();
      int int0 = aVLTree0.getBalance((AVLTree.Node) null);
      assertEquals(0, int0);
      
      int int1 = aVLTree0.height();
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(821);
      aVLTree0.insert((-786));
      aVLTree0.insert((-1394));
      aVLTree0.insert((-662));
      aVLTree0.delete((-786));
      aVLTree0.height();
      int int0 = 0;
      aVLTree0.delete((-662));
      aVLTree0.insert(0);
      aVLTree0.getRoot();
      aVLTree0.find(1);
      // Undeclared exception!
      try { 
        aVLTree0.insert(821);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.height();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(1272);
      aVLTree0.height();
      aVLTree0.delete(0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(1);
      // Undeclared exception!
      try { 
        aVLTree0.insert(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-5));
      aVLTree0.delete((-5));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      aVLTree0.insert(0);
      int int0 = (-1);
      aVLTree0.insert((-1));
      // Undeclared exception!
      try { 
        aVLTree0.delete(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-1));
      int int0 = 0;
      aVLTree0.insert(1245);
      aVLTree0.insert(0);
      aVLTree0.delete(0);
      aVLTree0.find(0);
      // Undeclared exception!
      try { 
        aVLTree0.insert((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = 0;
      aVLTree0.delete(0);
      aVLTree0.insert(0);
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree_Node0.height = 0;
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree_Node0.right = aVLTree_Node1;
      aVLTree_Node1.right = aVLTree_Node0;
      aVLTree_Node0.left = aVLTree_Node1;
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree_Node1.left = aVLTree_Node0;
      aVLTree0.find(0);
      // Undeclared exception!
      aVLTree0.delete(0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(740);
      aVLTree0.insert((-2021));
      aVLTree0.insert((-19));
      aVLTree0.height();
      aVLTree0.getRoot();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(633);
      aVLTree0.insert((-1));
      aVLTree0.insert((-2728));
      aVLTree0.insert(0);
      aVLTree0.find((-118));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = 1;
      aVLTree0.delete(1);
      aVLTree0.insert(1);
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(1);
      aVLTree_Node0.height = 1;
      aVLTree_Node0.height = (-668);
      aVLTree0.delete(111);
      aVLTree0.delete((-668));
      aVLTree_Node0.height = 1;
      aVLTree0.delete(1487);
      aVLTree0.height();
      int int1 = aVLTree0.getBalance(aVLTree_Node0);
      aVLTree_Node0.key = 1065;
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree_Node0.right = aVLTree_Node1;
      aVLTree0.delete(0);
      aVLTree0.insert(int0);
      int int2 = 0;
      aVLTree0.insert(int2);
      AVLTree.Node aVLTree_Node2 = aVLTree0.getRoot();
      aVLTree0.find(int1);
      int int3 = 0;
      aVLTree_Node2.key = int3;
      aVLTree0.height();
      aVLTree0.getBalance(aVLTree_Node2);
      int int4 = 5;
      AVLTree.Node aVLTree_Node3 = aVLTree0.find(int4);
      aVLTree_Node3.right = aVLTree_Node2;
      aVLTree_Node3.key = int3;
      aVLTree0.getBalance(aVLTree_Node3);
      aVLTree0.height();
      aVLTree0.getRoot();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = 834;
      aVLTree0.insert(834);
      int int1 = (-766);
      aVLTree0.insert((-766));
      aVLTree0.insert((-1394));
      aVLTree0.insert((-662));
      aVLTree0.delete((-766));
      aVLTree0.height();
      aVLTree0.height();
      int int2 = 0;
      aVLTree0.insert(0);
      aVLTree0.getRoot();
      aVLTree0.getRoot();
      aVLTree0.find(1);
      aVLTree0.find(1);
      aVLTree0.insert(1);
      int int3 = 2177;
      // Undeclared exception!
      try { 
        aVLTree0.insert(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = 1;
      aVLTree0.delete(1);
      aVLTree0.insert(1);
      aVLTree0.delete(0);
      aVLTree0.insert(0);
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(0);
      aVLTree_Node0.height = 1;
      int int1 = 315;
      aVLTree_Node0.height = 315;
      // Undeclared exception!
      try { 
        aVLTree0.delete(111);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(1);
      aVLTree0.delete(1);
      aVLTree0.insert(6621);
      aVLTree0.delete(0);
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(0);
      aVLTree0.find((-4195));
      aVLTree_Node0.left = null;
      aVLTree_Node0.right = null;
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree_Node0.right = aVLTree_Node1;
      aVLTree0.height();
      aVLTree_Node1.left = aVLTree_Node0.right;
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.getBalance(aVLTree_Node0);
      // Undeclared exception!
      aVLTree0.find(0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = 530;
      aVLTree0.insert(530);
      aVLTree0.insert(963);
      int int1 = 0;
      aVLTree0.insert(0);
      aVLTree0.delete(530);
      aVLTree0.insert((-1136));
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-1136));
      aVLTree0.insert((-947));
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree_Node0.left = aVLTree_Node1;
      aVLTree_Node0.right = aVLTree_Node1;
      aVLTree_Node0.key = 0;
      aVLTree_Node1.right = aVLTree_Node0.right;
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.getRoot();
      // Undeclared exception!
      aVLTree0.delete(0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-459));
      aVLTree0.height();
      aVLTree0.insert(4679);
      aVLTree0.delete(4679);
      aVLTree0.height();
      aVLTree0.height();
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(0);
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree_Node0.right = aVLTree_Node1;
      aVLTree_Node0.height = 0;
      aVLTree_Node0.height = (-459);
      aVLTree_Node1.left = aVLTree_Node0.right;
      aVLTree_Node0.height = 0;
      aVLTree_Node1.left.height = (-868);
      aVLTree_Node1.left = aVLTree_Node0;
      aVLTree_Node0.key = 1835;
      aVLTree_Node1.height = 0;
      AVLTree.Node aVLTree_Node2 = aVLTree_Node0.right;
      int int0 = aVLTree0.getBalance(aVLTree_Node2);
      aVLTree0.delete(0);
      aVLTree_Node2.right = aVLTree_Node0;
      aVLTree0.getRoot();
      aVLTree0.delete(937);
      aVLTree0.getBalance(aVLTree_Node0);
      // Undeclared exception!
      try { 
        aVLTree0.delete(int0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.getRoot();
      aVLTree0.height();
      aVLTree0.getRoot();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-459));
      aVLTree0.height();
      aVLTree0.insert(4679);
      aVLTree0.delete(4679);
      aVLTree0.height();
      aVLTree0.height();
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(0);
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree_Node0.right = aVLTree_Node1;
      aVLTree_Node0.height = 0;
      aVLTree_Node0.height = (-459);
      aVLTree_Node1.left = aVLTree_Node0.right;
      aVLTree_Node0.height = 0;
      aVLTree_Node1.left.height = (-868);
      aVLTree_Node1.left = aVLTree_Node0;
      aVLTree_Node0.key = 0;
      aVLTree_Node1.height = 0;
      AVLTree.Node aVLTree_Node2 = aVLTree_Node0.right;
      aVLTree0.getBalance(aVLTree_Node2);
      aVLTree0.delete(0);
      aVLTree_Node2.right = aVLTree_Node0;
      aVLTree0.getRoot();
      int int0 = 937;
      // Undeclared exception!
      try { 
        aVLTree0.delete(int0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }
}
